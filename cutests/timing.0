GPTL was built without threading
HAVE_MPI was false
ENABLE_NESTEDOMP was false
Underlying timing routine was gettimeofday.
GPTLget_overhead: using hash entry 317=total for getentry estimate
Total overhead of 1 GPTL start or GPTLstop call=3.9e-08 seconds
Components are as follows:
Fortran layer:             1.0e-09 =   2.6% of total
Get thread number:         1.0e-09 =   2.6% of total
Generate hash index:       6.0e-09 =  15.4% of total
Find hashtable entry:      5.0e-09 =  12.8% of total
Underlying timing routine: 2.3e-08 =  59.0% of total
Misc start/stop functions: 3.0e-09 =   7.7% of total

NOTE: If GPTL is called from C not Fortran, the 'Fortran layer' overhead is zero
NOTE: For calls to GPTLstart_handle()/GPTLstop_handle(), the 'Generate hash index' overhead is zero
NOTE: For auto-instrumented calls, the cost of generating the hash index plus finding
      the hashtable entry is 0.0e+00 not the 1.1e-08 portion taken by GPTLstart
NOTE: Each hash collision roughly doubles the 'Find hashtable entry' cost of that timer

If overhead stats are printed, they are the columns labeled self_OH and parent_OH
self_OH is estimated as 2X the Fortran layer cost (start+stop) plust the cost of 
a single call to the underlying timing routine.
parent_OH is the overhead for the named timer which is subsumed into its parent.
It is estimated as the cost of a single GPTLstart()/GPTLstop() pair.
Print method was full_tree.

If a '%_of' field is present, it is w.r.t. the first timer for thread 0.
A '*' in column 1 below means the timer had multiple parents, though the
values printed are for all calls.
Further down the listing may be more detailed information about multiple
parents. Look for 'Multiple parent info'

Process size=13043 MB rss=101 MB

Stats for thread 0:
         Called  Recurse Wallclock max       min       self_OH  parent_OH 
  total         1    -       8.978     8.978     8.978     0.000     0.000 

Overhead sum =   7.5e-08 wallclock seconds
Total calls  = 1
Size of hash table was 1023
Mean hash index for thread 0 was 317.000000

Total GPTL memory usage = 17.616 KB
Components:
Hashmem                 = 16.376 KB
Regionmem               = 0.208 KB
Parent/child arrays     = 0.008 KB
Callstackmem            = 1.024 KB

GPTLthreadid[0] = 0


GPU Results:
GPTLprint_gpustats: device number=0
GPTLprint_gpustats: hostname=laptop2018
Underlying timing routine was clock64() assumed @ 1.493000 Ghz
Total overhead of 1 GPTLstart_gpu or GPTLstop_gpu call=3.5144e-06 seconds
Components are as follows:
Fortran layer assumed zero, ASSUMES user provided null terminator
Get thread number:              3.3e-07 =   9.5% of total
Generate hash index:            1.8e-06 =  50.8% of total
Find hashtable entry:           1.4e-06 =  38.7% of total (name=runit)
Underlying timing routine:      3.5e-08 =   1.0% of total

my_strlen (part of genhashidx): 1.8e-06
STRMATCH (part of getentry):    2.6e-07


GPU timing stats
GPTL could handle up to 20 warps (640 threads)
This setting can be changed with: GPTLsetoption(GPTLmaxthreads_gpu,<number>)
19 = max warpId found
19 = max warpId examined
Only warps which were timed are counted in the following stats
Overhead estimates self_OH and parent_OH are for warp with 'maxcount' calls
OHD estimate assumes Fortran, and non-handle routines used
Actual overhead can be reduced by using 'handle' routines and '_c' Fortran routines

name            = region name
calls           = number of invocations across all examined warps
warps           = number of examined warps for which region was timed at least once
holes           = number of examined warps for which region was never executed (maxwarpid_timed + 1 - nwarps(region)
wallmax (warp)  = max wall time (sec) taken by any timed warp for this region, followed by the warp number
wallmin (warp)  = min wall time (sec) taken by any timed warp for this region, followed by the warp number
maxcount (warp) = max number of times region invoked by any timed warp, followed by the warp number
mincount (warp) = min number of times region invoked by any timed warp, followed by the warp number
negmax (warp)   = if a region had a negative interval, biggest count is printed along with the warp number responsible
nwarps          = number of warps encountering a negative interval
Bad_SM          = number of times smid changed (these instances are NOT timed!) Max possible = 'calls'
self_OH         = estimate of GPTL overhead (sec) in the timer incurred by 'maxcount' invocations of it
parent_OH       = estimate of GPTL overhead (sec) in the parent of the timer incurred by 'maxcount' invocations of it

   name    calls  warps  holes | wallmax  (warp)| wallmin (warp) | maxcount (warp)| mincount (warp)| negmax (warp) nwarps  | Bad_SM| self_OH parent_OH
  runit       20     20      0 |  10.000      0 |  10.000     15 |       1      0 |       1      0 |    -       -      -   |   -   |3.48e-08  6.99e-06 
percall       20     20      0 |  10.000      3 |  10.000     19 |       1      0 |       1      0 |    -       -      -   |   -   |3.48e-08  6.99e-06 

Total GPTL GPU memory usage = 106.72 KB
Components:
Hashmem                     = 20.32 KB
Regionmem                   = 86.4 KB
